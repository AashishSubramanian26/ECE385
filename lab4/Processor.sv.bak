//4-bit logic processor top level module


//Always use input/output logic types when possible, prevents issues with tools that have strict type enforcement

module Processor (input logic   Clk,     // Internal
                                Reset,   // Push button 0
                                Execute  // Push Button 1
                                ClearA_LoadB //Push button 2

						input  logic [7:0] S, //Input data 
						
                  output logic [6:0]  HEX1, HEX0, HEX3, HEX2,

                  output logic [7:0] Aval, Bval,

                  output logic Xval
                                );

                                

	 //local logic variables go here

    logic Reset, ClearXA_loadB, Execute, Shift_XAB;	 
	 logic shift, add, sub;

	 logic [7:0] A, B;
	 logic [8:0] Sum;

    logic A_Output; 
    logic B_Output; 
	 
	 logic X, M;
	 	 
	 assign M = B[0];
	 assign X = Sum[8];
	  
	 //Instantiation of modules here

	 register_unit    reg_unit (
                        .Clk(Clk),
                        .Ld_A(add), //note these are inferred assignments, because of the existence a logic variable of the same name
                        .Ld_B(sub),
                        .Shift_En(Shift_XAB),
                        .D_A(Sum[7:0]), 
                        .D_B(S), 
                        .A_In(sub),
                        .B_In(A_Output),
                        .A_out(A_Output),
                        .B_out(B_Output),
                        .A(A),
                        .B(B));
	 control          control_unit (
                        .Clk(Clk),
                        .Reset(Reset),
                        .CLR_LDB(ClearA_LoadB), 
                        .ClearXA_LoadB(ClearXA_LoadB),
                        .Execute(Execute),
                        .Shift_XAB(Shift_XAB),
                        .Add(add), 
                        .Sub(sub),
                        .M(M));
    ADD_SUB9         Add_Shit (
                        .A(S), 
                        .B(A), 
                        .fn(sub), 
                        .S(Sum)
                     ); 
	 HexDriver        HexAL (
                        .In0(A[3:0]),
                        .Out0(AhexL) );
	 HexDriver        HexBL (
                        .In0(B[3:0]),
                        .Out0(BhexL) );
								
	 //When you extend to 8-bits, you will need more HEX drivers to view upper nibble of registers, for now set to 0
	 HexDriver        HexAU (
                        .In0(A[7:4]),
                        .Out0(AhexU) );	
	 HexDriver        HexBU (
                       .In0(B[7:4]),
                        .Out0(BhexU) );
								
	  //Input synchronizers required for asynchronous inputs (in this case, from the switches)
	  //These are array module instantiations
	  //Note: S stands for SYNCHRONIZED, H stands for active HIGH
	  //Note: We can invert the levels inside the port assignments
	  sync button_sync[3:0] (Clk, {~Reset, LoadA, LoadB, ~Execute}, {Reset_SH, LoadA_SH, LoadB_SH, Execute_SH});
	  sync Din_sync[7:0] (Clk, Din, Din_S); //changed to 8 bits
	  sync F_sync[2:0] (Clk, F, F_S);
	  sync R_sync[1:0] (Clk, R, R_S);
	  
endmodule
